#!/bin/bash
## Crafted (c) 2023 by Encora - We are stronger together
## Prepared : Roberto Nogueira
## File     : site
## Project  : rails-site-manager
## Reference: bash
## Depends  : ack, ansi, cowsay, foreman, fping, iredis, mycli, pgcli, pv, wget and pup
## Purpose  : Help to manage ordinary things.

# set -x

export SITE_VERSION=v1.0.32
export SITE_VERSION_DATE=2023.11.15
export SITE_UPDATE_MESSAGE="'site.update' was updated." 

# rvm domain
rvm.domain(){
  site.function_handler $*
}
rvm.domain.methods(){ echo "methods|help|init|print"; }
rvm.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "rvm.domain" "[$(rvm.domain.methods)]"; }
rvm.domain.init(){ 
  rvm_print=$1
  site.function_names 'rvm.domain'
  rvm.domain.update
}
rvm.domain.print(){ printf "\e[1;34m%s \e[0m%s\n" "  $DOMAIN_RVM" "$DOMAIN_RUBY"; }
rvm.domain.update(){
  local ruby_version
  local rails_version
  if [ "$rvm_print" = "true" ]; then 
    if hash rvm 2>/dev/null; then
      if test $(rvm current) == 'system'; then
        ruby_version="ruby-$(ruby --version | awk '{print $2}' | cut -d 'p' -f 1)"
        if hash rails 2>/dev/null; then
          rails_version="rails-$(rails --version | awk '{print $2}')"
          DOMAIN_RVM="system"
          DOMAIN_RUBY="$ruby_version@$rails_version"
        else
          DOMAIN_RVM="system"
          DOMAIN_RUBY="$ruby_version"
        fi
      else
        ruby_version=$(rvm current)
        rails --version | grep "Rails is not currently installed" > /dev/null
        if [ $? -eq 0 ]; then
         rails_version=""
        else
         rails_version="rails-$(rails --version | awk '{print $2}')"
        fi
        if test -z "$rails_version"; then
          DOMAIN_RVM="rvm domain"
          DOMAIN_RUBY="$ruby_version"
        else
          DOMAIN_RVM="rvm domain"
          DOMAIN_RUBY="$ruby_version@$rails_version"
        fi  
      fi
    else
      ruby_version="ruby-$(ruby --version | awk '{print $2}' | cut -d 'p' -f 1)"
      if hash rails 2>/dev/null; then
        rails_version="rails-$(rails --version | awk '{print $2}')"
        DOMAIN_RVM="system"
        DOMAIN_RUBY="$ruby_version@$rails_version"
      else
        DOMAIN_RVM="system"
        DOMAIN_RUBY="$ruby_version"
      fi
    fi
  fi 
}

# env domain
env.domain(){
  site.function_handler $*
}
env.domain.methods(){ echo "methods|help|init|development|print|test"; }
env.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "env.domain" "[$(env.domain.methods)]"; }
env.domain.init(){ site.function_names 'env.domain'; }
env.domain.development(){ export RAILS_ENV=development; }
env.domain.print(){
  printf "\e[1;34m%s \e[0m" "  env domain"
  if test "$RAILS_ENV" == 'development' || test -z "$RAILS_ENV"; then 
    ansi --no-newline --green "development"
    ansi --no-newline " "
    ansi --black-intense "test"
  else
    ansi --no-newline --green "test"
    ansi --no-newline " "
    ansi --black-intense "development"
  fi
}
env.domain.test(){ export RAILS_ENV=test; }

# dbs domain
dbs.domain(){
  site.function_handler $*
}
dbs.domain.methods(){ echo "methods|help|init|local|multi|print|remote"; }
dbs.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "dbs.domain" "[$(dbs.domain.methods)]"; }
dbs.domain.init(){ site.function_names 'dbs.domain'; }
dbs.domain.local(){
  if test -f config/database.yml && test -f config/database.yml.local; then
    cp config/database.yml.local config/database.yml
    dbs.init
  else  
    printf " \e[0;31m%s \e[0m%s\n" "=>" "config/database.yml.local does not exist"
  fi
}
dbs.domain.multi(){
  if test -f config/database.yml && test -f config/database.yml.multi; then
    cp config/database.yml.multi config/database.yml
    dbs.init
  else  
    printf " \e[0;31m%s \e[0m%s\n" "=>" "config/database.yml.multi does not exist"
  fi
}
dbs.domain.print(){
  local adapter=$(test -f config/database.yml && echo $(dbs.parse_yml config/database.yml | grep development_adapter | awk -F'"' '{print $2}'))
  local is_multi=$(test -f config/database.yml && echo $(dbs.parse_yml config/database.yml | grep DB | head -1))
  if test "$adapter" == 'mysql2'; then
    echo "local"
  elif test -z "$is_multi"; then
    echo "remote"
  else  
    echo "multi"
  fi
}
dbs.domain.printf(){
  if test $(site.is_site) = 'yes'; then
    printf "\e[1;34m%s \e[0m" "  dbs domain"
    if test $(dbs.domain) == 'local'; then
      ansi --no-newline --green "local"
      ansi --no-newline " "
      if test $(vpn.connected) == 'yes'; then
        ansi --no-newline --black-intense "remote"
      else
        ansi --no-newline --red "remote"
      fi  
      ansi --no-newline " "
      ansi --black-intense "multi"
    fi
    if test $(dbs.domain) == 'remote'; then
      if test $(vpn.connected) == 'yes'; then
        ansi --no-newline --green "remote"
      else
        ansi --no-newline --red "remote"
      fi  
      ansi --no-newline " "
      ansi --no-newline --black-intense "local"
      ansi --no-newline " "
      ansi --black-intense "multi"
    fi
    if test $(dbs.domain) == 'multi'; then
      ansi --green "multi"
      ansi --no-newline " "
      ansi --no-newline --black-intense "local"
      ansi --no-newline " "
      if test $(vpn.connected) == 'yes'; then
        ansi --black-intense "remote"
      else
        ansi --red "remote"
      fi  
    fi
  fi
}
dbs.domain.remote(){
  if test $(vpn.connected) == 'yes'; then 
    if test -f config/database.yml && test -f config/database.yml.remote; then
      cp config/database.yml.remote config/database.yml
      dbs.init
    else  
      printf " \e[0;31m%s \e[0m%s\n" "=>" "config/database.yml.remote does not exist"
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
    ansi ""
  fi 
}

# git domains
git.domain(){
  site.function_handler $*
}
git.domain.methods(){ echo "methods|help|init|justworks.init|justworks|gmail.init|gmail|print"; }
git.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "git.domain" "[$(git.domain.methods)]"; }
git.domain.init(){ site.function_names 'git.domain'; }
git.domain.justworks.init(){ justworks_name=$1; justworks_email=$2; }
git.domain.justworks(){
  git config --global user.name "$justworks_name"
  git config --global user.email "$justworks_email"
}
git.domain.gmail.init(){ gmail_name=$1; gmail_email=$2; }
git.domain.gmail(){
  git config --global user.name "$gmail_name"
  git config --global user.email "$gmail_email"
}
git.domain.print(){
  local domain=$(echo $(git config user.email) | awk -F\@ '{print $2}' | awk -F\. '{print $1}')
  printf "\e[1;34m%s \e[0m" "  git domain"
  if test "$domain" == 'gmail'; then 
    ansi --no-newline --green "gmail"
    ansi --no-newline " "
    ansi --black-intense "justworks"
  else
    ansi --no-newline --green "justworks"
    ansi --no-newline " "
    ansi --black-intense "gmail"
  fi
}

# projects
projects(){
  site.function_handler $*
}
projects.methods(){ echo "methods|help|init|ls|print"; }
projects.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "projects" "[$(projects.methods)]"; }
projects.init(){ projects_print=$1;site.function_names 'projects'; }
projects.ls(){ tdpl; }
projects.print(){
  if test $(site.is_site) = 'no'; then
    if [ "$projects_print" = "true" ]; then
      echo -e "projects:"
      tl | sed 's/^/  /' 
    fi
  fi  
}

# databases
dbs(){
  site.function_handler $*
}
dbs.methods(){ echo "methods|help|init|archives|parse_yml|console|current|has_database|tables|has_tables|records|has_records|print_db|print|create|refresh|change_refresh_schedule|delete|rebuild_test|instances_db_remote"; }
dbs.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "dbs" "[$(dbs.methods)]"; }
dbs.init(){
  local dbs_location=$(dbs.domain)
  local db
  site.function_names 'dbs'
  SKYLAB_URL=https://skylab.justworks.com/download_sanitized?name=clockwork_sanitized_no_excluded_tables.sql.gz
  unset MYSQL_DATABASE_DEV
  unset MYSQL_DATABASE_TST
  MYSQL_DATABASE_DEV=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_database | awk -F'"' '{print $2}')
  MYSQL_DATABASE_TST=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep test_database | awk -F'"' '{print $2}' | awk -F'<' '{print $1}')
  case $dbs_location in
    local)
      ;;
    remote|multi)
      export DB_USERNAME=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_makara_connections__username | awk -F'"' '{print $2}')
      export DB_PASSWORD=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_makara_connections__password | awk -F'"' '{print $2}')
      export DB_HOST=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_makara_connections__host | awk -F'"' '{print $2}')
      DB_REMOTE_HOST='https://sanitized-db.justworks.com'
      ;;
  esac
  if test $(site.is_site) = 'yes'; then
    db=$(dbs.current development)
    DB_TABLES_DEV=$(dbs.tables $db)
    DB_RECORDS_DEV=$(dbs.records $db)
    db=$(dbs.current test)
    DB_TABLES_TST=$(dbs.tables $db)
    DB_RECORDS_TST=$(dbs.records $db)
  fi  
}
dbs.archives(){
  local archives='https://sanitized-db.justworks.com/archives.html'
  if test $(vpn.connected) == 'yes';then 
    ansi --blue-intense "Archive data        File Name                               Ts     File Size"
    xidel $archives -e '//tr / string-join(td, " ")' 2> /dev/null | head -3 | sed '/^[[:space:]]*$/d'
    ansi --blue-intense "Archive data        File Name                                           Timestamp      File Size"
    xidel $archives -e '//tr / string-join(td, " ")' 2> /dev/null | tail -340 | head
    ansi ""
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
  fi
}
dbs.parse_yml(){
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\):|\1|" \
       -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
  awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
  }'  
}
dbs.console(){
  local db=$(dbs.current)
  local dbs_location=$(dbs.domain)
  if [ "$(dbs.has_database $db)" == 'yes' ]; then
    case $dbs_location in
      local)
        mycli -uroot $db
        ;;
      remote)
        if test $(vpn.connected) == 'yes'; then 
          mycli -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST $db
        else  
          ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
        fi  
        ;;
    esac  
  else   
    ansi --red-intense --no-newline $db;ansi --red " does not exist"
    ansi ""
  fi
}
dbs.current(){
  local env=$1
  if [ -z $env ]; then
    env=$RAILS_ENV
  fi
  if [ "$env" == "development" ] || [ -z $env ]; then
    if [ -z $MYSQL_DATABASE_DEV ]; then
      MYSQL_DATABASE_DEV=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_database | awk -F'"' '{print $2}')
    fi
    echo $MYSQL_DATABASE_DEV
  else
    if [ -z $MYSQL_DATABASE_TST ]; then
      MYSQL_DATABASE_TST=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep test_database | awk -F'"' '{print $2}' | awk -F'<' '{print $1}')
    fi
    echo $MYSQL_DATABASE_TST
  fi   
}
dbs.has_database(){
  local db=$1
  local dbs_location=$(dbs.domain)
  local res
  case $dbs_location in
    local)
      mysqlshow -uroot > /dev/null 2>&1
      if [ $? -eq 1 ]; then 
        ansi --no-newline --red-intense "==> "; ansi --white-intense "Database error"
        echo ""
      else  
        res=`mysqlshow -uroot | grep -o $db`
        if [ "$res" == $db ]; then
          echo 'yes'
        else
          echo 'no'  
        fi
      fi
      ;;
    remote)
      if test $(vpn.connected) == 'yes'; then 
        res=`mysql -u $DB_USERNAME -h $DB_HOST -p$DB_PASSWORD -e "SHOW DATABASES;" 2>/dev/null | grep -o $db`
        if [ "$res" == $db ]; then
          echo 'yes'
        else
          echo 'no'  
        fi
      else  
        echo 'no'  
      fi  
      ;;
  esac  
}
dbs.tables(){
  local db=$1
  local dbs_location=$(dbs.domain)
  local s
  local db_test=$(dbs.current test)
  if [ $db == $db_test ]; then
    s=`mysql -u root -e "SELECT count(*) AS TOTALNUMBEROFTABLES FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';"`
  else
    case $dbs_location in
      local)
        s=`mysql -u root -e "SELECT count(*) AS TOTALNUMBEROFTABLES FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';"`
        ;;
      remote)
        if test $(vpn.connected) == 'yes'; then 
          s=`mysql -u $DB_USERNAME -h $DB_HOST -p$DB_PASSWORD -e "SELECT count(*) AS TOTALNUMBEROFTABLES FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';" 2>/dev/null`
        else  
          s=""  
        fi  
        ;;
    esac  
  fi
  echo $(echo -n $s | sed 's/[^0-9]*//g' | tr -d '\n')

}
dbs.has_tables(){
  local db=$1
  local tables=$(dbs.tables $db)
  if [ ! "$tables" == '0' ] && [ ! -z $tables ]; then
    echo 'yes'
  else
    echo 'no'  
  fi
}
dbs.records(){
  local db=$1
  local dbs_location=$(dbs.domain)
  local s
  local db_test=$(dbs.current test)
  if [ $db == $db_test ]; then
    s=`mysql -u root -e "SELECT SUM(TABLE_ROWS) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';"`
  else  
    case $dbs_location in
      local)
        s=`mysql -u root -e "SELECT SUM(TABLE_ROWS) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';"`
        ;;
      remote)
        if test $(vpn.connected) == 'yes'; then 
          s=`mysql -u $DB_USERNAME -h $DB_HOST -p$DB_PASSWORD -e "SELECT SUM(TABLE_ROWS) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';" 2>/dev/null`
        else  
          s=""  
        fi  
        ;;
    esac  
  fi
  echo $(echo -n $s | sed 's/[^0-9]*//g' | tr -d '\n')
}
dbs.has_records(){
  local db=$1
  local records=$(dbs.records $1)
  if [ ! "$records" == '' ] && [ ! -z $records ]; then
    echo 'yes'
  else
    echo 'no'  
  fi
}
dbs.print_db(){
  local env=$1
  local db
  local db_lens=()
  db=$(dbs.current development)
  db_lens+=(${#db})
  db=$(dbs.current test)
  db_lens+=(${#db})
  IFS=$'\n'
  major=$(echo "${db_lens[*]}" | sort -nr | head -n1)
  unset IFS
  if [ -z $env ]; then
    env=$RAILS_ENV
  fi
  if [ "$env" == "development" ]; then
    db=$(dbs.current development)
  else  
    db=$(dbs.current test)
  fi
  db=$(printf "%-${major}s" "${db}")
  if [ "$(dbs.has_database $db)" == 'yes' ]; then
    if [ $env == "development" ]; then
      ansi --no-newline "  "; ansi --no-newline --green $db' '; ansi --white --no-newline $DB_TABLES_DEV' '; ansi --white $DB_RECORDS_DEV
    else
      ansi --no-newline "  "; ansi --no-newline --green $db' '; ansi --white --no-newline $DB_TABLES_TST' '; ansi --white $DB_RECORDS_TST
    fi  
  else  
    ansi --no-newline "  "; ansi --red $db
  fi
}
dbs.print(){
  if test $(site.is_site) = 'yes'; then
    if test $(dbs.domain) == 'local'; then
      ansi "dbs:"
      dbs.print_db development
      dbs.print_db test 
    elif  test $(dbs.domain) == 'remote' && test $(vpn.connected) == 'yes'; then
      ansi "dbs:"
      dbs.print_db development
      dbs.print_db test 
    else  
      ansi ""
      printf " \e[0;31m%s \e[0m%s\n" "=>" "AWS VPN not connected!"
      ansi ""
      return 1
    fi
  fi  
}
dbs.create(){
  local refresh=$(test -z $1 && echo "daily" || echo $1)
  if test $(site.is_site) == 'yes'; then
    script/docker-sanitized-db/create-db -e $justworks_email -r $refresh
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "Must be executed under the '$(site.name)' folder"
  fi
}
dbs.refresh(){
  if test $(site.is_site) == 'yes'; then
    if test $(dbs.domain) == 'remote'; then
      script/docker-sanitized-db/refresh-db -u $DB_USERNAME -p $DB_PASSWORD
    else
      ansi --no-newline --red-intense "==> "; ansi --white-intense "dbs domain must be remote!"
    fi
  fi
}
##
# Usage command: dbs.change_refresh_schedule daily|weekly|manual
##
dbs.change_refresh_schedule() {
  local schedule=$1
  if test $(site.is_site) == 'yes'; then
    if test $(dbs.domain) == 'remote'; then
      if [ "$schedule" == "daily" ] || [ "$schedule" == "weekly" ] || [ "$schedule" == "manual" ]; then
        ansi --no-newline --green-intense "==> "; ansi --white-intense "Changing refresh schedule to $schedule";
        script/docker-sanitized-db/change-refresh-schedule -u $DB_USERNAME -p $DB_PASSWORD -r $schedule
      else
        ansi --no-newline --red-intense "==> "; ansi --white-intense "Invalid schedule option! [daily|weekly|manual]"
      fi
    else
      ansi --no-newline --red-intense "==> "; ansi --white-intense "dbs domain must be remote!"
    fi
  fi
}
##
# Usage command: dbs.instances_db_remote
##
dbs.instances_db_remote() {
  local url=https://sanitized-db.justworks.com
  local html_content

  html_content=$(curl -sS "$url")

  if [[ "$(site.is_site)" == 'yes' && "$(dbs.domain)" == 'remote' ]]; then
    ansi --blue-intense "🐳 Sanitized Docker Databases 🐳"
    table_content=$(echo "$html_content" | pup 'table')
    if [[ $table_content =~ $PUPPET_USER ]]; then
      ansi --no-newline --green-intense "==> "; ansi --blue-intense "User: $PUPPET_USER"
      # Show only the first line of the table
      echo -e "$table_content" | grep -m 1 "$PUPPET_USER"
    else
      ansi --no-newline --red-intense "User not found!"
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "dbs domain must be remote!"
  fi
}
dbs.delete(){
  local email=$1
  local refresh=$(test -z $2 && echo "daily" || echo $2)
  if test $(site.is_site) == 'yes'; then
    if test $(dbs.domain) == 'remote'; then
      script/docker-sanitized-db/delete-db -u $DB_USERNAME -p $DB_PASSWORD
    else
      ansi --no-newline --red-intense "==> "; ansi --white-intense "dbs domain must be remote!"
    fi
  fi
}
dbs.rebuild_test(){
  export DB_NAME=$(dbs.current test)
  if test $(site.is_site) == 'yes'; then
    ansi --no-newline --green-intense "==> "; ansi --white-intense "Restarting" "MySQL"
    services.mysql stop
    services.mysql start
    ansi --no-newline --green-intense "==> "; ansi --white-intense "Running" "rebuild_test_db.sh"
    ./rebuild_test_db.sh
    ansi --no-newline --green-intense "==> "; ansi --white-intense "Running" "dbs.init"
    dbs.init
    ansi ""
  fi
}

# dumps
dumps(){
  site.function_handler $*
}
dumps.methods(){ echo "methods|help|init|download|import|print|activate|deactivate"; }
dumps.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "dumps" "[$(dumps.methods)]"; }
dumps.init(){ 
  dumps_print=$1
  site.function_names 'dumps'
}
dumps.download(){
  local site=$(site.name)
   ansi --no-newline --green-intense "==> "; ansi --white-intense "Downloading " "clockwork_sanitized_no_excluded_tables.sql.gz"
   wget -q --show-progress --user $PUPPET_USER --password $PUPPET_PASS -O clockwork_sanitized_no_excluded_tables.sql.gz $SKYLAB_URL && site.notify "dbs.download finished!"
   ansi --no-newline --green-intense "==> "; ansi --white-intense "Renaming to" "$(date +%Y-%m-%d_%H-%M-%S)_${site}.sql.gz"
   mv clockwork_sanitized_no_excluded_tables.sql.gz "$(date +%Y-%m-%d_%H-%M-%S)_${site}.sql.gz"
}
dumps.import(){
  local site=$(site.name)
  local files_sql=(`ls *.sql.gz`)
  if test $(dbs.domain) == 'local'; then
    if test $(dbs.has_database $(dbs.current)) == 'yes'; then
      export DISABLE_DATABASE_ENVIRONMENT_CHECK=1
      ansi --no-newline --green-intense "==> "; ansi --white-intense "Dropping " "databases"
      bundle exec rake db:drop &> /dev/null
    fi;  
    ansi --no-newline --green-intense "==> "; ansi --white-intense "Creating " "databases"
    bundle exec rake db:create &> /dev/null
    if [ ! -z "$files_sql" ]; then
      IFS=$'\n'
      files_sql=( $(printf "%s\n" ${files_sql[@]} | sort -r ) )
      file=${files_sql[0]}
      ansi --no-newline --green-intense "==> "; ansi --white-intense "Resizing " $file
      env.domain.development
      pv $file | gzip -cd  | sed -r '/INSERT INTO `(earnings_entries|tax_snapshots|invoice_fee_items)`/d' | gzip > temp.sql.gz
      mv temp.sql.gz $file
      ansi --no-newline --green-intense "==> "; ansi --white-intense "Importing " $file
      pv $file | gunzip | mysql -u root $(dbs.current) && site.notify "dbs.import has finished!"
      unset DISABLE_DATABASE_ENVIRONMENT_CHECK
      unset IFS
      dumps.activate $file
      dbs.init
    else
     ansi --no-newline --red-intense "==> "; ansi --white-intense "Error no dump file"
     ansi ""
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "dbs domain must be local!"
    ansi ""
  fi;
}
dumps.print(){
  local dump_active
  local dumps
  local site=$(site.name)
  if test $(site.is_site) = 'yes'; then
    ansi "dumps:"
    if test -f tmp/devtools/${site}.dump_active; then
      dump_active=$(cat tmp/devtools/${site}.dump_active)
    fi  
    IFS=$'\n'
    dumps=(`ls *.sql.gz 2>/dev/null`)
    dumps=($(printf "%s\n" ${dumps[@]} | sort -r )) 
    if [ ! -z "$dumps" ]; then
      for dump in ${dumps[*]}
      do
        ansi --no-newline "  "
        if [ "$dump" == "$dump_active" ]; then
          ansi --green $dump
        else
          ansi --red $dump  
        fi
      done
    else  
      ansi --red "  no dumps"
    fi
    unset IFS
  fi
}
dumps.activate(){
  local dump_active=$1
  local dumps
  local site=$(site.name)
  IFS=$'\n'
  dumps=(`ls *.sql.gz 2>/dev/null`)
  if [ ! -z "$dumps" ]; then
    ! test -d tmp/devtools && mkdir -p tmp/devtools
    for dump in ${dumps[*]}
    do
      if [ "$dump" == "$dump_active" ]; then
        echo $dump > tmp/devtools/${site}.dump_active 
      fi
    done
  fi
  unset IFS
}
dumps.deactivate(){
  local site=$(site.name)
  test -f tmp/devtools/${site}.dump_active && rm -rf tmp/devtools/${site}.dump_active
}

# rdd
rdd(){
  site.function_handler $*
}
rdd.methods(){ echo "methods|help|init|set|unset|check|print"; }
rdd.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "rdd" "[$(rdd.methods)]"; }
rdd.init(){ 
  rdd_print=$1
  site.function_names 'rdd'
}
rdd.set(){
  bundle add 'amazing_print' --group "develpment, test" --skip-install
  bundle add 'table_print' --group "develpment, test" --skip-install
  bundle add 'pry-clipboard' --group "develpment, test" --skip-install
  bundle add 'pry-doc' --group "develpment, test" --skip-install
  bundle add 'pry-gem' --group "develpment, test" --skip-install
  bundle add 'pry-rescue' --group "develpment, test" --skip-install
  bundle add 'pry-stack_explorer' --group "develpment, test" --skip-install
  bundle install
}
rdd.unset(){
  bundle remove amazing_print table_print pry-clipboard pry-doc pry-gem pry-rescue pry-stack_explorer
  bundle install
  git checkout -- Gemfile
}
rdd.check(){
  cat Gemfile | grep "pry-rescue" > /dev/null
  if [ $? -ne 0 ]; then 
    echo 'no'
  else
    echo 'yes'
  fi
}
rdd.print(){
  if [ "$rdd_print" = "true" ]; then
    if test $(rdd.check) == 'yes'; then
      ansi --green "RDD"
    else
      ansi --red "RDD"
    fi  
  fi
}

# services
services(){
  site.function_handler $*
}
services.methods(){ echo "methods|help|init|start|stop|print_up|print_ups|print_down|print_downs|print"; }
services.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "services" "[$(services.methods)]"; }
services.init(){ site.function_names 'services'; }
services.print(){
  if test $(site.is_site) = 'yes'; then
    ansi "services:"
    services.print_ups
    services.print_downs
  fi
}
services.start(){
  local site=$([[ ! -z "$s1" ]] && echo $1 ]] || echo $(site.name))
  case $site in
    clockwork_web)
      foreman start -f Procfile.dev
      ;;
    *)
      printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
     ;;   
  esac    
}
services.stop(){
  local site=$([[ ! -z "$s1" ]] && echo $1 ]] || echo $(site.name))
  case $site in
    clockwork_web)
      pkill "foreman: master"
      ;;
    *)
      printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
     ;;   
  esac    
}
# private methods
services.print_up(){
  local service=$1
  local major=$2
  local pid=$3
  case $service in
    redis)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "redis")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "localhost:6379";ansi " $pid"
      fi
      ;;
    mysql)
      case $(dbs.domain) in
        local)
          if [ ! -z $pid ]; then
            service=$(printf "%-${major}s" "mysql")
            ansi --no-newline "  ${service} ";
            ansi --no-newline --underline --green "localhost:3306";ansi " $pid"
          fi  
          ;;
        remote)
          if test $(vpn.connected) == 'yes'; then
            service=$(printf "%-${major}s" "mysql")
            ansi --no-newline "  ${service} ";
            ansi --underline --green "$DB_REMOTE_HOST"
          else
            service=$(printf "%-${major}s" "mysql")
            ansi --no-newline "  ${service} ";
            ansi --underline --red "$DB_REMOTE_HOST"
          fi  
          ;;
      esac
      ;;
    postgresql)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "postgresql")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "localhost:5432";ansi " $pid"
      fi  
      ;;
    skylab)
      skylab.print
      ;;  
    assets)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "assets")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "yarn.js watch ";ansi " $pid"
      fi 
      ;;
    worker)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "worker")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "http://localhost:3000/sidekiq";ansi " $pid"
      fi 
      ;;
    web)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "web")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green-intense "http://localhost:3000";ansi " $pid"
      fi  
      ;;
  esac
}
services.print_ups(){
  local pid_redis=$(netstat -anv | grep LISTEN | grep "[.]6379" | awk '{print $9}' | uniq | head -1)
  local pid_mysql=$(netstat -anv | grep LISTEN | grep "[.]3306" | awk '{print $9}' | uniq)
  local pid_postgresql=$(netstat -anv | grep LISTEN | grep "[.]5432" | awk '{print $9}' | uniq)
  local pid_skylab=$(test $(vpn.connected) == 'yes' && echo yes)
  local pid_assets=$(command ps aux | grep 'yarn.js watch' | grep -v grep | awk '{print $2}')
  local pid_worker=$(command ps aux | grep sidekiq | grep -v grep | awk '{print $2}')
  local pid_web=$(test -f tmp/pids/server.pid && cat "tmp/pids/server.pid")
  local services=(redis postgresql mysql skylab assets worker web)
  local service_name_lens=()
  local major
  for s in ${services[@]}
  do
    pid=pid_${s}
    if ! test -z ${!pid}; then
      service_name_lens+=(${#s})
    fi
  done
  IFS=$'\n'
  major=$(echo "${service_name_lens[*]}" | sort -nr | head -n1)
  unset IFS
  for s in ${services[@]}
  do
    pid=pid_${s}
    if ! test -z ${!pid}; then
      services.print_up $s $major ${!pid}
    fi
  done
}
services.print_down(){
  local service=$1
  local last=$2
  if [ "$last" == "true" ]; then
    ansi --red "$service";
  else
    ansi --no-newline --red "$service";
  fi 
}
services.print_downs(){
  local pid_redis=$(netstat -anv | grep LISTEN | grep "[.]6379" | awk '{print $9}' | uniq | head -1)
  local pid_mysql=$(netstat -anv | grep LISTEN | grep "[.]3306" | awk '{print $9}' | uniq)
  local pid_postgresql=$(netstat -anv | grep LISTEN | grep "[.]5432" | awk '{print $9}' | uniq)
  local pid_skylab=$(test $(vpn.connected) == 'yes' && echo yes)
  local pid_assets=$(command ps aux | grep 'yarn.js watch' | grep -v grep | awk '{print $2}')
  local pid_worker=$(command ps aux | grep sidekiq | grep -v grep | awk '{print $2}')
  local pid_web=$(test -f tmp/pids/server.pid && cat "tmp/pids/server.pid")
  local services_not_running
  local services=(redis mysql postgresql skylab assets worker web)
  for s in ${services[@]}
  do
    pid=pid_${s}
    if test -z ${!pid}; then
      services_not_running+=($s)
    fi
  done
  if [ ${#services_not_running[@]} -gt 1 ]; then
    ansi --no-newline "  "
    for s in ${services_not_running[@]}
    do
      if [ "$s" == "${services_not_running[${#services_not_running[@]}-1]}" ]; then
        services.print_down $s true
      else  
        services.print_down $s false 
        ansi --no-newline ", "
      fi
    done
  fi  
}

services.mysql(){
  site.function_handler $*
}
services.mysql.methods(){ echo "methods|help|init|console|list|restart|start|stop"; }
services.mysql.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "services.mysql" "[$(services.mysql.methods)]"; }
services.mysql.init(){ site.function_names 'services.mysql'; }
services.mysql.console(){ dbs.console; }
services.mysql.list(){ 
  brew services list \
  | grep --color=never "Name\|Status User\|File\|mysql@5.7" \
  | ack --flush --passthru "Name|Status User|File" --color --color-match='bold white' \
  | ack --flush --passthru 'started' --color --color-match=green \
  | ack --flush --passthru 'none' --color --color-match=red 
}
services.mysql.restart(){ brew services restart mysql@5.7; }
services.mysql.start(){ brew services start mysql@5.7; }
services.mysql.stop(){ brew services stop mysql@5.7; }

services.redis(){
  site.function_handler $*
}
services.redis.methods(){ echo "methods|help|init|console|list|restart|start|stop"; }
services.redis.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "services.redis" "[$(services.redis.methods)]"; }
services.redis.init(){ site.function_names 'services.redis'; }
services.redis.console(){ iredis -h 127.0.0.1 -p 6379; }
services.redis.list(){ 
  brew services list \
  | grep --color=never "Name\|Status User\|File\|redis" \
  | ack --flush --passthru "Name|Status User|File" --color --color-match='bold white' \
  | ack --flush --passthru 'started' --color --color-match=green \
  | ack --flush --passthru 'none' --color --color-match=red 
}
services.redis.restart(){ brew services restart redis; }
services.redis.start(){ brew services start redis; }
services.redis.stop(){ brew services stop redis; }

# skylab
skylab(){
  site.function_handler $*
}
skylab.methods(){ echo "methods|help|init|instances|sandbox|staging|prod|control|console|print"; }
skylab.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "skylab" "[$(skylab.methods)]"; }
skylab.init(){ 
  skylab_print=$1
  site.function_names 'skylab'
  SKYLAB_INSTANCES=https://hosts.justworks.com/instances
}
skylab.instances(){
  local instances=$SKYLAB_INSTANCES
  if test $(vpn.connected) == 'yes'; then
    curl -s $instances
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
    ansi ""
  fi  
}
skylab.sandbox(){
  local instances=$SKYLAB_INSTANCES
  if test $(vpn.connected) == 'yes'; then
    SKYLAB_INSTANCE_SANDBOX=$([[ ! -z "$s1" ]] && echo $1 ]] || echo sandbox-app-104)
    curl -s $instances | grep '^(running) : sandbox' | sed 's/(running) ://g'
    fping -C 1 $SKYLAB_INSTANCE_SANDBOX &> /dev/null
    if [ $? -eq 0 ]; then 
      echo "RAILS_ENV=sandbox bundle exec rails console" | pbcopy 
      SKYLAB_INSTANCE=$SKYLAB_INSTANCE_SANDBOX
      ansi --no-newline --green-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' is pinging!"
      ansi ""
    else
      ansi --no-newline --red-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' not pinging!"
      ansi ""
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
    ansi ""
  fi  
}
skylab.staging(){
  local instances=$SKYLAB_INSTANCES
  if test $(vpn.connected) == 'yes'; then
    SKYLAB_INSTANCE_STAGING=$([[ ! -z "$s1" ]] && echo $1 ]] || echo staging-api-105)
    curl -s $instances | grep '^(running) : staging' | sed 's/(running) ://g'
    fping -C 1 $SKYLAB_INSTANCE_STAGING &> /dev/null
    if [ $? -eq 0 ]; then 
      echo "RAILS_ENV=staging bundle exec rails console" | pbcopy
      SKYLAB_INSTANCE=$SKYLAB_INSTANCE_STAGING
      ansi --no-newline --green-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE_STAGING}' is pinging!"
      ansi ""
    else
      ansi --no-newline --red-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' not pinging!"
      ansi ""
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
    ansi ""
  fi  
}
skylab.prod(){
  local instances=$SKYLAB_INSTANCES
  if test $(vpn.connected) == 'yes'; then
    curl -s $instances | grep '^(running) : prod' | sed 's/(running) ://g'
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
    ansi ""
  fi  
}
skylab.control(){
  local instances=$SKYLAB_INSTANCES
  if test $(vpn.connected) == 'yes'; then
    SKYLAB_INSTANCE=$1
    curl -s $instances | grep "${SKYLAB_INSTANCE}" > /dev/null
    if [ $? -eq 1 ]; then
      ansi --no-newline --red-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' does not exist!"
      ansi ""
    else  
      fping -C 1 $SKYLAB_INSTANCE &> /dev/null
      if [ $? -eq 0 ]; then 
        echo "$PUPPET_PASS" | pbcopy
        ssh-copy-id $PUPPET_USER@$SKYLAB_INSTANCE &> /dev/null
        ansi --no-newline --green-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' is pinging!"
        ansi ""
      else
        ansi --no-newline --red-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' not pinging!"
        ansi ""
      fi
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
      ansi ""
  fi  
}
skylab.console(){
  if test $(vpn.connected) == 'yes'; then
    if ! test -z $SKYLAB_INSTANCE; then
      fping -C 1 $SKYLAB_INSTANCE &>/dev/null
      if [ $? -eq 0 ]; then
        echo "$PUPPET_PASS" | pbcopy
        ssh $PUPPET_USER@$SKYLAB_INSTANCE 
      else
        ansi --no-newline --red-intense "==> "; ansi --white-intense "Instance '${SKYLAB_INSTANCE}' not pinging!"
      fi
    fi
  else
    ansi --no-newline --red-intense "==> "; ansi --white-intense "AWS VPN Client not connected!"
  fi
}
skylab.print(){
  if test $(vpn.connected) == 'yes'; then
    service=$(printf "%-${major}s" "skylab")
    ansi --no-newline "  ${service} ";
    if ! test -z $SKYLAB_INSTANCE; then
      fping -C 1 $SKYLAB_INSTANCE &> /dev/null
      if [ $? -eq 0 ]; then 
        ansi --no-newline --underline --green "https://${SKYLAB}"; ansi " ${SKYLAB_INSTANCE}"
      else
        ansi --underline --green "https://${SKYLAB}"
      fi
    else
      ansi --underline --green "https://${SKYLAB}"
    fi 
  fi 
}

# vpn
vpn(){
  site.function_handler $*
}
vpn.methods(){ echo "methods|help|init|connected|loop|print"; }
vpn.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "env.domain" "[$(env.domain.methods)]"; }
vpn.init(){ 
  vpn_print=$1
  site.function_names 'vpn'
  SKYLAB=skylab.justworks.com; 
}
vpn.connected(){
  fping -C 1 $SKYLAB &>/dev/null
  if [ $? -ne 0 ]; then 
    echo 'no'
  else
    echo 'yes'
  fi
}
vpn.loop(){
  while true ; do
    if read -t 0; then 
        read -n 1 char
        break
    else 
      fping -C 1 $SKYLAB &>/dev/null
      if [ $? -eq 0 ]; then 
        printf "\e[0;32m%s\e[0m" "."
      else
        printf "\e[0;31m%s\e[0m" "."
      fi
      sleep 1
    fi       
  done
}
vpn.print(){
  if [ "$vpn_print" = "true" ]; then
    if test $(vpn.connected) == 'yes'; then
      ansi --green "AWS VPN Client"
    else
      ansi --red "AWS VPN Client"
    fi  
  fi
}

# site
site(){
  local site_methods="+($(site.methods))"
  local params="+(${fnames#?})"
  if [ -z "$1" ]; then
    site.print
  else   
    case $1 in
      --version|-v|v|version)
        site.version
        ;;
      --help|-h|h|help)
        printf "\e[1;37m%s \e[0m\n" "Crafted (c) 2021~22 by Encora - We are stronger together"
        site.version
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "site" "[print||start|stop|update|version]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "vpn" "[connected|loop|print]"
        printf "::\n"  
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "rvm.domain" "[print]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "env.domain" "[print|development|test]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "dbs.domain" "[print|local|remote|multi]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "git.domain" "[print|justworks|gmail]"
        printf "::\n"  
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "dbs" "[print|create|change_refresh_schedule|delete|rebuild_test|instances_db_remote]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "dumps" "[print|download|import|activate|deactivate]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "rdd" "[check|print|set|unset]"
        printf "::\n"  
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "services" "[print|start|stop]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "services.mysql" "[console|list|restart|start|stop]"
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "services.redis" "[console|list|restart|start|stop]"
        printf "::\n"  
        printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "skylab" "[instances|sandbox|staging|prod|control|console|print]"
        printf "::\n"  
        printf "\e[0;32m%s \e[4m%s\e[0m\e[0m\n" "homepage" "https://github.com/enogrob/rails-site-manager"
        printf "\n"
        ;;
      $site_methods)
        if [ -z "$2" ]; then
          case $1 in
            $params)
              $1
              ;;
            *)
              site.$1
              ;;
          esac
        else  
          local param_methods="+($(! test -z "$1" && $1.methods))"
          case $2 in
            $param_methods)
              $1.$2 ${@:3}
              ;;
            *)
              printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${2}"
              ;;  
          esac
        fi  
        ;;
      *)
        if [ -z "$1" ]; then
          site.print
        else   
          printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
        fi  
        ;;
    esac
  fi
}
site.methods(){ echo "methods|help|init|function_handler|function_names|branches|commit|issues|master|name|notify|is_site|print|start|stop|update|version$fnames"; }
site.help(){ printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "site" "[$(site.methods)]"; }
site.init(){
  unset fnames

  env.domain.init
  rvm.domain.init $(hash ruby 2>/dev/null && test "$?" -eq 0 && echo true)
  git.domain.init
  projects.init $(test -f $HOME/Projects/project-things-today/.todayrc.sh && echo true)
  dbs.init
  dbs.domain.init
  dumps.init true
  rdd.init true
  services.init
  services.mysql.init
  services.redis.init
  skylab.init true
  vpn.init true
}
site.function_handler(){
  local fname=${FUNCNAME[1]}
  local method=$1
  local methods="+($(${fname}.methods))"
  if [ -z "$method" ]; then
    ${fname}.print    
  else    
    case ${method} in
      $methods)
        ${fname}.${method} ${@:2}
        ;;
      *)
        printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${method}"
        ;;  
    esac
  fi  
}
site.function_names(){
  local fname=$1
  fnames="$fnames|$fname"
}
site.branches(){ git branch --sort=-committerdate | head; }
site.commit(){ git log -1 --oneline --name-only `git branch --show-current`; }
site.issues(){ git log --grep=RISK --pretty=format:"%h%x09%an%x09%ad%x09%s" | head; }
site.master(){ $HOME/Projects/rails-site-manager/scripts/update-master; }
site.name(){
  if test $(site.is_site) = 'no'; then
    SITE="$USER@$(hostname)" 
  else
    SITE="$(basename $PWD)" 
  fi   
  echo $SITE
}
site.notify() {
  local message=$1
	/usr/bin/osascript -e "display notification \"\" with title \"${message}\""
}
site.is_site(){
  if test -f config/database.yml; then
    echo 'yes'
  else
    echo 'no'  
  fi
}
site.print(){
  if test $(site.is_site) = 'yes'; then
    printf "site: \e[1;37m%s \e[0m - \e[0;36m%s\e[0m - \e[0;36m%s\e[0m\n" "$(site.name)" "$(rdd.print)" "$(vpn.print)"
  else
    printf "site: \e[1;37m%s \e[0m - \e[0;36m%s\e[0m\n" "$(site.name)" "$(vpn.print)"
  fi
  #rvm.domain.print
  #env.domain.print
  #dbs.domain.printf
  #git.domain.print
  site.print_domains
  services.print
  test -z $DB_TABLES_DEV && dbs.init
  dbs.print
  if test $(dbs.domain) == 'local'; then
    dumps.print
  fi  
  projects.print
  printf ""  
}
site.print_domains(){
 local domain=$(echo $(git config user.email) | awk -F\@ '{print $2}' | awk -F\. '{print $1}')
  local adapter=$(test -f config/database.yml && echo $(dbs.parse_yml config/database.yml | grep development_adapter | awk -F'"' '{print $2}'))
  local is_multi=$(test -f config/database.yml && echo $(dbs.parse_yml config/database.yml | grep DB | head -1))
  printf "\e[1;34m%s \e[0m%s" "  domains" "$DOMAIN_RUBY"
  if test $(site.is_site) = 'yes'; then
    ansi --no-newline ", "
    if test "$RAILS_ENV" == 'development' || test -z "$RAILS_ENV"; then 
      ansi --no-newline --green "development"
    else
      ansi --no-newline --green "test"
    fi
    ansi --no-newline ", "
    if test "$adapter" == 'mysql2'; then
      ansi --no-newline --green "local"
    elif test -z "$is_multi"; then
      ansi --no-newline --green "remote"
    else  
      ansi --no-newline --green "multi"
    fi
  fi
  ansi --no-newline ", "
  if test "$domain" == 'gmail'; then 
    ansi --green "gmail"
  else
    ansi --green "justworks"
  fi
}
site.start(){ services.start; }
site.stop(){ services.stop; }
site.update(){
  pushd $HOME/Projects/rails-site-manager > /dev/null
  git pull | grep "Already up to date" > /dev/null
  if [ $? -eq 1 ]; then
    source $HOME/.bashrc
    brew bundle --no-upgrade
    ansi --white --no-newline "'Rails Site Manager' is now updated to ";ansi --white-intense $SITE_VERSION
    cowsay $SITE_UPDATE_MESSAGE
  else
    ansi --white --no-newline "'Rails Site Manager' is ";ansi --white-intense "Already up to date"
  fi
  popd > /dev/null
}
site.version(){
  printf "\e[0;37m%s \e[0m%s\n" "Site" "$SITE_VERSION"
  printf "\n"
}

# site setup
site.init