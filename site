#!/bin/bash
## Crafted (c) 2022 by Encora - We are stronger together
## Prepared : Roberto Nogueira
## File     : site
## Project  : rails-site-manager
## Reference: bash
## Depends  : fping, screen.
## Purpose  : Help to manage ordinary things.

# set -x

export SITE_VERSION=v1.0.00
export SITE_VERSION_DATE=2022.06.05
export SITE_UPDATE_MESSAGE=""

# rvm domain
rvm.domain(){
  site.function_handler $*
}
rvm.domain.methods(){ echo "methods|help|init|print"; }
rvm.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "rvm.domain" "[$(rvm.domain.methods)]"; }
rvm.domain.init(){ rvm_print=$1;site.function_names 'rvm.domain'; }
rvm.domain.print(){
  local ruby_version
  local rails_version
  if [ "$rvm_print" = "true" ]; then 
    if hash rvm 2>/dev/null; then
      if test $(rvm current) == 'system'; then
        ruby_version="ruby-$(ruby --version | awk '{print $2}' | cut -d 'p' -f 1)"
        if hash rails 2>/dev/null; then
          rails_version="rails-$(rails --version | awk '{print $2}')"
          printf "\e[1;34m%s \e[0m%s\n" "  system    " "$ruby_version@$rails_version"
        else
          printf "\e[1;34m%s \e[0m%s\n" "  system    " "$ruby_version"
        fi
      else
        ruby_version=$(rvm current)
        rails --version | grep "Rails is not currently installed" > /dev/null
        if [ $? -eq 0 ]; then
         rails_version=""
        else
         rails_version="rails-$(rails --version | awk '{print $2}')"
        fi
        if test -z "$rails_version"; then
          printf "\e[1;34m%s \e[0m%s\n" "  rvm domain" "$ruby_version"
        else
          printf "\e[1;34m%s \e[0m%s\n" "  rvm domain" "$ruby_version@$rails_version"
        fi  
      fi
    else
      ruby_version="ruby-$(ruby --version | awk '{print $2}' | cut -d 'p' -f 1)"
      if hash rails 2>/dev/null; then
        rails_version="rails-$(rails --version | awk '{print $2}')"
        printf "\e[0;34m%s \e[0m%s\n" "  system    " "$ruby_version@$rails_version"
      else
        printf "\e[0;34m%s \e[0m%s\n" "  system    " "$ruby_version"
      fi
    fi
  fi 
}

# env domain
env.domain(){
  site.function_handler $*
}
env.domain.methods(){ echo "methods|help|init|development|print|test"; }
env.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "env.domain" "[$(env.domain.methods)]"; }
env.domain.init(){ site.function_names 'env.domain'; }
env.domain.development(){ export RAILS_ENV=development; }
env.domain.print(){
  printf "\e[1;34m%s \e[0m" "  env domain"
  if test "$RAILS_ENV" == 'development' || test -z "$RAILS_ENV"; then 
    ansi --no-newline --green "development"
    ansi --no-newline " "
    ansi --black-intense "test"
  else
    ansi --no-newline --green "test"
    ansi --no-newline " "
    ansi --black-intense "development"
  fi
}
env.domain.test(){ export RAILS_ENV=test; }

# git domains
git.domain(){
  site.function_handler $*
}
git.domain.methods(){ echo "methods|help|init|encora.init|encora|gmail.init|gmail|print"; }
git.domain.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "git.domain" "[$(git.domain.methods)]"; }
git.domain.init(){ site.function_names 'git.domain'; }
git.domain.encora.init(){ encora_name=$1; encora_email=$2; }
git.domain.encora(){
  git config --global user.name "$encora_name"
  git config --global user.email "$encora_email"
}
git.domain.gmail.init(){ gmail_name=$1; gmail_email=$2; }
git.domain.gmail(){
  git config --global user.name "$gmail_name"
  git config --global user.email "$gmail_email"
}
git.domain.print(){
  local domain=$(echo $(git config user.email) | awk -F\@ '{print $2}' | awk -F\. '{print $1}')
  printf "\e[1;34m%s \e[0m" "  git domain"
  if test "$domain" == 'gmail'; then 
    ansi --no-newline --green "gmail"
    ansi --no-newline " "
    ansi --black-intense "encora"
  else
    ansi --no-newline --green "encora"
    ansi --no-newline " "
    ansi --black-intense "gmail"
  fi
}

# projects
projects(){
  site.function_handler $*
}
projects.methods(){ echo "methods|help|init|ls|print"; }
projects.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "projects" "[$(projects.methods)]"; }
projects.init(){ projects_print=$1;site.function_names 'projects'; }
projects.ls(){ tdpl; }
projects.print(){
  if test $(site.is_site) = 'no'; then
    if [ "$projects_print" = "true" ]; then
      echo -e "projects:"
      tl | sed 's/^/  /' 
    fi
  fi  
}

# databases
dbs(){
  site.function_handler $*
}
dbs.methods(){ echo "methods|help|init|parse_yml|console|current|has_database|tables|has_tables|records|has_records|print_db|print|location|domain|domain.print"; }
dbs.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "dbs" "[$(dbs.methods)]"; }
dbs.init(){
  unset MYSQL_DATABASE_DEV
  unset MYSQL_DATABASE_TST
  DB_REMOTE_USER=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_makara_connections__username | awk -F'"' '{print $2}')
  DB_REMOTE_PASS=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_makara_connections__password | awk -F'"' '{print $2}')
  DB_REMOTE_URL=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_makara_connections__host | awk -F'"' '{print $2}')
  MYSQL_DATABASE_DEV=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_database | awk -F'"' '{print $2}')
  MYSQL_DATABASE_TST=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep test_database | awk -F'"' '{print $2}' | awk -F'<' '{print $1}')
  site.function_names 'dbs'
}
dbs.parse_yml(){
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\):|\1|" \
       -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
  awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
  }'  
}
dbs.console(){
  local db=$(dbs.current)
  local dbs_location=$(dbs.location)
  if [ "$(dbs.has_database $db)" == 'yes' ]; then
    mycli -uroot $db
    case $dbs_location in
      local)
        mycli -uroot $db
        ;;
      remote)
        mycli -u$DB_REMOTE_USER -p$DB_REMOTE_PASS -h$DB_REMOTE_URL $db
        ;;
    esac  
  else   
    ansi --red-intense --no-newline $db;ansi --red " does not exist"
    ansi ""
  fi
}
dbs.current(){
  local env=$1
  if [ -z $env ]; then
    env=$RAILS_ENV
  fi
  if [ "$env" == "development" ] || [ -z $env ]; then
    if [ -z $MYSQL_DATABASE_DEV ]; then
      MYSQL_DATABASE_DEV=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep development_database | awk -F'"' '{print $2}')
    fi
    echo $MYSQL_DATABASE_DEV
  else
    if [ -z $MYSQL_DATABASE_TST ]; then
      MYSQL_DATABASE_TST=$(test -f config/database.yml && dbs.parse_yml config/database.yml | grep test_database | awk -F'"' '{print $2}' | awk -F'<' '{print $1}')
    fi
    echo $MYSQL_DATABASE_TST
  fi   
}
dbs.has_database(){
  local db=$1
  local dbs_location=$(dbs.location)
  local res
  case $dbs_location in
    local)
      mysqlshow -uroot > /dev/null 2>&1
      if [ $? -eq 1 ]; then 
        ansi --no-newline --red-intense "==> "; ansi --white-intense "Database error"
        echo ""
      else  
        res=`mysqlshow -uroot | grep -o $db`
        if [ "$res" == $db ]; then
          echo 'yes'
        else
          echo 'no'  
        fi
      fi
      ;;
    remote)
      res=`mysql -u $DB_REMOTE_USER -h $DB_REMOTE_URL -p$DB_REMOTE_PASS -e "SHOW DATABASES;" 2>/dev/null | grep -o $db`
      if [ "$res" == $db ]; then
        echo 'yes'
      else
        echo 'no'  
      fi
      ;;
  esac  
}
dbs.tables(){
  local db=$1
  local dbs_location=$(dbs.location)
  local s
  case $dbs_location in
    local)
      s=`mysql -u root -e "SELECT count(*) AS TOTALNUMBEROFTABLES FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';"`
      ;;
    remote)
      s=`mysql -u $DB_REMOTE_USER -h $DB_REMOTE_URL -p$DB_REMOTE_PASS -e "SELECT count(*) AS TOTALNUMBEROFTABLES FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';" 2>/dev/null`
      ;;
  esac  
  echo $(echo -n $s | sed 's/[^0-9]*//g' | tr -d '\n')

}
dbs.has_tables(){
  local db=$1
  local tables=$(dbs.tables $db)
  if [ ! "$tables" == '0' ] && [ ! -z $tables ]; then
    echo 'yes'
  else
    echo 'no'  
  fi
}
dbs.records(){
  local db=$1
  local dbs_location=$(dbs.location)
  local s
  case $dbs_location in
    local)
      s=`mysql -u root -e "SELECT SUM(TABLE_ROWS) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';"`
      ;;
    remote)
      s=`mysql -u $DB_REMOTE_USER -h $DB_REMOTE_URL -p$DB_REMOTE_PASS -e "SELECT SUM(TABLE_ROWS) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db';" 2>/dev/null`
      ;;
  esac  
  echo $(echo -n $s | sed 's/[^0-9]*//g' | tr -d '\n')
}
dbs.has_records(){
  local db=$1
  local records=$(dbs.records $1)
  if [ ! "$records" == '' ] && [ ! -z $records ]; then
    echo 'yes'
  else
    echo 'no'  
  fi
}
dbs.print_db(){
  local env=$1
  local db
  local db_lens=()
  db=$(dbs.current development)
  db_lens+=(${#db})
  db=$(dbs.current test)
  db_lens+=(${#db})
  IFS=$'\n'
  major=$(echo "${db_lens[*]}" | sort -nr | head -n1)
  unset IFS
  if [ -z $env ]; then
    env=$RAILS_ENV
  fi
  if [ "$env" == "development" ]; then
    db=$(dbs.current development)
  else  
    db=$(dbs.current test)
  fi
  db=$(printf "%-${major}s" "${db}")
  if [ "$(dbs.has_database $db)" == 'yes' ]; then
    if [ $env == "development" ]; then
      ansi --no-newline "  "; ansi --no-newline --green $db' '; ansi --white --no-newline $(dbs.tables $db)' '; ansi --white $(dbs.records $db)
    else
      ansi --no-newline "  "; ansi --no-newline --green $db' '; ansi --white --no-newline $(dbs.tables $db)' '; ansi --white $(dbs.records $db)
    fi  
  else  
    ansi --no-newline "  "; ansi --red $db
  fi
}
dbs.print(){
  if test $(site.is_site) = 'yes'; then
    if test $(dbs.location) == 'local' || test $(dbs.location) == 'remote'; then
      ansi "dbs:"
      dbs.print_db development
      dbs.print_db test 
    fi
  fi  
}
dbs.location(){
  local adapter=$(test -f config/database.yml && echo $(dbs.parse_yml config/database.yml | grep development_adapter | awk -F'"' '{print $2}'))
  local is_multi=$(test -f config/database.yml && echo $(dbs.parse_yml config/database.yml | grep DB | head -1))
  if test "$adapter" == 'mysql2'; then
    echo "local"
  elif test -z "$is_multi"; then
    echo "remote"
  else  
    echo "multi"
  fi
}
dbs.domain(){
  domain=$1
  if test -f config/database.yml; then
    case $domain in
      local)
        if test -f config/database.yml.local; then
          cp config/database.yml.local config/database.yml
        else  
          printf " \e[0;31m%s \e[0m%s\n" "=>" "config/database.yml.local does not exist"
        fi
        ;;
      remote)
        if test -f config/database.yml.remote; then
          cp config/database.yml.remote config/database.yml
        else  
          printf " \e[0;31m%s \e[0m%s\n" "=>" "config/database.yml.remote does not exist"
        fi
        ;;
      multi)
        if test -f config/database.yml.multi; then
          cp config/database.yml.multi config/database.yml
        else  
          printf " \e[0;31m%s \e[0m%s\n" "=>" "config/database.yml.multi does not exist"
        fi
        ;;
      *)
        dbs.domain.print
        ;;
    esac
  fi
}
dbs.domain.print(){
  if test $(site.is_site) = 'yes'; then
    printf "\e[1;34m%s \e[0m" "  dbs domain"
    if test $(dbs.location) == 'local'; then
      ansi --no-newline --green "local"
      ansi --no-newline " "
      ansi --no-newline --black-intense "remote"
      ansi --no-newline " "
      ansi --black-intense "multi"
    fi
    if test $(dbs.location) == 'remote'; then
      ansi --no-newline --green "remote"
      ansi --no-newline " "
      ansi --no-newline --black-intense "local"
      ansi --no-newline " "
      ansi --black-intense "multi"
    fi
    if test $(dbs.location) == 'multi'; then
      ansi --green "multi"
      ansi --no-newline " "
      ansi --no-newline --black-intense "local"
      ansi --no-newline " "
      ansi --black-intense "remote"
    fi
  fi
}

# services
services(){
  site.function_handler $*
}
services.methods(){ echo "methods|help|init|start|stop|print_up|print_ups|print_down|print_downs|print"; }
services.help(){ printf "\e[1;37m%s \e[0m \e[1;36m%s\e[0m\n" "services" "[$(services.methods)]"; }
services.init(){ site.function_names 'services'; }
services.start(){
  local site=$([[ ! -z "$s1" ]] && echo $1 ]] || echo $(site.name))
  case $site in
    clockwork_web)
      foreman start -f Procfile.dev
      ;;
    *)
      printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
     ;;   
  esac    
}
services.stop(){
  local site=$([[ ! -z "$s1" ]] && echo $1 ]] || echo $(site.name))
  case $site in
    clockwork_web)
      pkill "foreman: master"
      ;;
    *)
      printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
     ;;   
  esac    
}
services.print_up(){
  local service=$1
  local major=$2
  local pid=$3
  case $service in
    redis)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "redis")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "localhost:6379";ansi " $pid"
      fi
      ;;
    mysql)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "mysql")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "localhost:3306";ansi " $pid"
      fi  
      ;;
    postgresql)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "postgresql")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "localhost:5432";ansi " $pid"
      fi  
      ;;
    assets)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "assets")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "yarn.js watch ";ansi " $pid"
      fi 
      ;;
    worker)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "worker")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green "http://localhost:3000/sidekiq";ansi " $pid"
      fi 
      ;;
    web)
      if [ ! -z $pid ]; then
        service=$(printf "%-${major}s" "web")
        ansi --no-newline "  ${service} ";
        ansi --no-newline --underline --green-intense "http://localhost:3000";ansi " $pid"
      fi  
      ;;
  esac
}
services.print_ups(){
  local pid_redis=$(netstat -anv | grep LISTEN | grep "[.]6379" | awk '{print $9}' | uniq | head -1)
  local pid_mysql=$(netstat -anv | grep LISTEN | grep "[.]3306" | awk '{print $9}' | uniq)
  local pid_postgresql=$(netstat -anv | grep LISTEN | grep "[.]5432" | awk '{print $9}' | uniq)
  local pid_assets=$(ps | grep 'yarn.js watch' | grep -v grep | awk '{print $2}')
  local pid_worker=$(ps | grep sidekiq | grep -v grep | awk '{print $2}')
  local pid_web=$(test -f tmp/pids/server.pid && cat "tmp/pids/server.pid")
  if test $(dbs.location) == 'local'; then
    local services=(redis mysql postgresql assets worker web)
  else
    local services=(redis postgresql assets worker web)
  fi
  local service_name_lens=()
  local major
  for s in ${services[@]}
  do
    pid=pid_${s}
    if ! test -z ${!pid}; then
      service_name_lens+=(${#s})
    fi
  done
  IFS=$'\n'
  major=$(echo "${service_name_lens[*]}" | sort -nr | head -n1)
  unset IFS
  for s in ${services[@]}
  do
    pid=pid_${s}
    if ! test -z ${!pid}; then
      services.print_up $s $major ${!pid}
    fi
  done
}
services.print_down(){
  local service=$1
  local last=$2
  if [ "$last" == "true" ]; then
    ansi --red "$service";
  else
    ansi --no-newline --red "$service";
  fi 
}
services.print_downs(){
  local pid_redis=$(netstat -anv | grep LISTEN | grep "[.]6379" | awk '{print $9}' | uniq | head -1)
  local pid_mysql=$(netstat -anv | grep LISTEN | grep "[.]3306" | awk '{print $9}' | uniq)
  local pid_postgresql=$(netstat -anv | grep LISTEN | grep "[.]5432" | awk '{print $9}' | uniq)
  local pid_assets=$(ps | grep 'yarn.js watch' | grep -v grep | awk '{print $2}')
  local pid_worker=$(ps | grep sidekiq | grep -v grep | awk '{print $2}')
  local pid_web=$(test -f tmp/pids/server.pid && cat "tmp/pids/server.pid")
  local services_not_running
  if test $(dbs.location) == 'local'; then
    local services=(redis mysql postgresql assets worker web)
  else
    local services=(redis postgresql assets worker web)
  fi
  for s in ${services[@]}
  do
    pid=pid_${s}
    if test -z ${!pid}; then
      services_not_running+=($s)
    fi
  done
  if [ ${#services_not_running[@]} -gt 1 ]; then
    ansi --no-newline "  "
    for s in ${services_not_running[@]}
    do
      if [ "$s" == "${services_not_running[${#services_not_running[@]}-1]}" ]; then
        services.print_down $s true
      else  
        services.print_down $s false 
        ansi --no-newline ", "
      fi
    done
  fi  
}
services.print(){
  if test $(site.is_site) = 'yes'; then
    ansi "services:"
    services.print_ups
    services.print_downs
  fi
}

# site
site(){
  local site_methods="+($(site.methods))"
  if [ -z "$1" ]; then
    site.print
  else   
    case $1 in
      --version|-v|v|version)
        site.version
        ;;
      --help|-h|h|help)
        printf "\e[1;37m%s \e[0m\n" "Crafted (c) 2021~22 by Encora - We are stronger together"
        site.version
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(site.help)]" 
        printf "\n"  
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(git.domain.help)]"
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(rvm.domain.help)]"
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(env.domain.help)]"
        printf "\n"  
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(projects.help)]"
        printf "::\n"  
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(dbs.help)]"
        printf "\e[1;37m%s \e[0m%s\n" "site" "[$(services.help)]"
        printf "::\n"  
        printf "\e[0;32m%s \e[4m%s\e[0m\e[0m\n" "homepage" "https://github.com/enogrob/rails-site-manager"
        printf "\n"
        ;;
      $site_methods)
        if [ -z "$2" ]; then
          $1 
        else  
          local param_methods="+($(! test -z "$1" && $1.methods))"
          case $2 in
            $param_methods)
              $1.$2 ${@:3}
              ;;
            *)
              printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${2}"
              ;;  
          esac
        fi  
        ;;
      *)
        if [ -z "$1" ]; then
          site.print
        else   
          printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${1}"
        fi  
        ;;
    esac
  fi
}
site.methods(){ echo "methods|help|init|function_handler|function_names|name||is_site|print|version|$fnames"; }
site.help(){ printf "\e[1;37m%s   \e[0m \e[1;36m%s\e[0m\n" "site" "[$(site.methods)]"; }
site.init(){
  unset fnames

  env.domain.init
  rvm.domain.init $(hash ruby 2>/dev/null && test "$?" -eq 0 && echo true)
  git.domain.init
  git.domain.encora.init "Roberto Nogueira" "roberto.nogueira@encora.com"
  git.domain.gmail.init "Roberto Nogueira" "enogrob@gmail.com" 
  projects.init $(test -f $HOME/Projects/project-things-today/.todayrc.sh && echo true)
  dbs.init
  services.init
}
site.function_handler(){
  local fname=${FUNCNAME[1]}
  local method=$1
  local methods="+($(${fname}.methods))"
  if [ -z "$method" ]; then
    ${fname}.print    
  else    
    case ${method} in
      $methods)
        ${fname}.${method} ${@:2}
        ;;
      *)
        printf " \e[0;31m%s \e[0m%s\n" "=>" "invalid parameter ${method}"
        ;;  
    esac
  fi  
}
site.function_names(){
  local fname=$1
  fnames="$fnames|$fname"
}
site.name(){
  if test $(site.is_site) = 'no'; then
    echo "$USER@$(hostname)" 
  else
    echo "$(basename $PWD)" 
  fi  
}
site.is_site(){
  if test -f config/database.yml; then
    echo 'yes'
  else
    echo 'no'  
  fi
}
site.print(){
  printf "site: \e[4m\e[1;37m$(site.name)\e[0m\e[0m\n" 
  rvm.domain.print
  env.domain.print
  dbs.domain.print
  git.domain.print
  services.print
  dbs.print
  projects.print 
  printf ""  
}
site.version(){
  printf "\e[0;37m%s \e[0m%s\n" "Site" "$SITE_VERSION"
  printf "\n"
}

# site setup
site.init